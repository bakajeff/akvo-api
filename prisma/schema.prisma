// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  role      Role       @default(customer)
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @db.Timestamptz(6)
  store     Store?
  order     Order[]
  authLink  AuthLink[]
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  manager     User?     @relation(fields: [managerId], references: [id], onDelete: SetNull)
  managerId   Int?      @unique
  products    Product[]
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(6)
  order       Order[]
}

model Product {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  priceInCents Int
  store        Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId      Int
  orderItems   OrderItems[]
  createdAt    DateTime     @default(now()) @db.Timestamptz()
  updatedAt    DateTime     @updatedAt @db.Timestamptz(6)
}

model Order {
  id           Int          @id @default(autoincrement())
  store        Store?       @relation(fields: [storeId], references: [id], onDelete: SetNull)
  storeId      Int?
  customer     User?        @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId   Int?
  orderItems   OrderItems[]
  status       OrderStatus  @default(pending)
  totalInCents Int
  createdAt    DateTime     @default(now()) @db.Timestamptz()
}

model OrderItems {
  id           Int      @id @default(autoincrement())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      Int
  product      Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId    Int?
  quantity     Int      @default(1)
  priceInCents Int
}

model AuthLink {
  id     Int    @id @default(autoincrement())
  code   String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

enum OrderStatus {
  pending
  canceled
  processing
  delivering
  delivered
}

enum Role {
  customer
  manager
}
